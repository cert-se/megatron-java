# As "ip-flowing.properties", but without DNS lookups and organization matching. 
# Will output IP address, ASN, AS name, and country code.
#
# Example line: 
# 193.44.6.118 | 193.44.6.134 | 192.44.242.18 | 192.44.243.18 
#
# Expanded reg-exp:
# (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})

# Split line; one line for each IP address entry. Test file: multiple-ips-per-line.log
lineProcessor.className=se.sitic.megatron.lineprocessor.LineSplitter
lineProcessor.splitter.itemRegExp=.*?\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}

# Split line; one line for each IP address entry. Test file: multiple-ips-per-line2.log
#lineProcessor.className=se.sitic.megatron.lineprocessor.LineSplitter
#lineProcessor.splitter.separatorRegExp=\t

# Adds ASN + CC
decorator.classNames.0=se.sitic.megatron.decorator.AsnGeoIpDecorator
decorator.classNames.1=se.sitic.megatron.decorator.CountryCodeDecorator

# No organization matching
filter.organizationFilter.matchIpAddress=false
filter.organizationFilter.matchHostname=false
filter.organizationFilter.matchAsn=false

# Add AS number and name as additional items
decorator.asnGeoIpDecorator.useAsnInLogEntry=false
decorator.asnGeoIpDecorator.addAsName=true

# Definition in globals properties allows empty value, which do not work if spaces exist
# before or after the IP-address. 
parser.item.ipAddress=\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}

# Line expression
parser.lineRegExp=$ipAddress

# Export
export.headerFile=whois-short_header.txt
export.rowFile=whois-short_row.txt
